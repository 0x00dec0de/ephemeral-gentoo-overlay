--- gpar2.cc.orig	2006-02-26 02:05:26.000000000 +1100
+++ gpar2.cc	2011-04-29 11:14:26.940897216 +1000
@@ -1,5 +1,5 @@
 #include "gpar2.h"
-
+#include <libintl.h>
 
 int main(int argc, char *argv[])
 {
--- mainwindow.cc.orig	2006-02-27 04:20:22.000000000 +1100
+++ mainwindow.cc	2011-04-29 11:14:20.020983559 +1000
@@ -280,7 +280,7 @@
   bool res = commandline->Parse(3, argv);
   if (res == false) {
     status_label.set_text("Error !");
-    status_frame.modify_bg(Gtk::STATE_NORMAL,Gdk::Color::Color("red"));
+    status_frame.modify_bg(Gtk::STATE_NORMAL,Gdk::Color("red"));
   }
   else {
     // Repair damaged files
@@ -467,42 +467,42 @@
  switch (result) {
   case eSuccess:
     status_label.set_text(_("Complete"));
-    status_frame.modify_bg(Gtk::STATE_NORMAL,Gdk::Color::Color("green"));
+    status_frame.modify_bg(Gtk::STATE_NORMAL,Gdk::Color("green"));
     status = complete;
     break;
   case eRepairPossible:
     status_label.set_text(_("Repair possible"));
-    status_frame.modify_bg(Gtk::STATE_NORMAL,Gdk::Color::Color("blue"));
+    status_frame.modify_bg(Gtk::STATE_NORMAL,Gdk::Color("blue"));
     status = repairable;
     break;
   case eRepairNotPossible:
     status_label.set_text(_("Repair not possible"));
-    status_frame.modify_bg(Gtk::STATE_NORMAL,Gdk::Color::Color("red"));
+    status_frame.modify_bg(Gtk::STATE_NORMAL,Gdk::Color("red"));
     status = unrepairable;
     break;
   case eInsufficientCriticalData:
     status_label.set_text(_("Insufficient critical data"));
-    status_frame.modify_bg(Gtk::STATE_NORMAL,Gdk::Color::Color("red"));
+    status_frame.modify_bg(Gtk::STATE_NORMAL,Gdk::Color("red"));
     status = unrepairable;
     break;
   case eRepairFailed:
     status_label.set_text(_("Repair failed"));
-    status_frame.modify_bg(Gtk::STATE_NORMAL,Gdk::Color::Color("red"));
+    status_frame.modify_bg(Gtk::STATE_NORMAL,Gdk::Color("red"));
     status = unrepairable;
     break;
   case eFileIOError:
     status_label.set_text(_("I/O error"));
-    status_frame.modify_bg(Gtk::STATE_NORMAL,Gdk::Color::Color("red"));
+    status_frame.modify_bg(Gtk::STATE_NORMAL,Gdk::Color("red"));
     status = unrepairable;
     break;
   case eLogicError:
     status_label.set_text(_("Internal error"));
-    status_frame.modify_bg(Gtk::STATE_NORMAL,Gdk::Color::Color("red"));
+    status_frame.modify_bg(Gtk::STATE_NORMAL,Gdk::Color("red"));
     status = unrepairable;
     break;
  case eMemoryError:
    status_label.set_text(_("Out of memory"));
-   status_frame.modify_bg(Gtk::STATE_NORMAL,Gdk::Color::Color("red"));
+   status_frame.modify_bg(Gtk::STATE_NORMAL,Gdk::Color("red"));
    status = unrepairable;
    break;
  default:
@@ -519,7 +519,7 @@
 			      Gtk::MESSAGE_ERROR, Gtk::BUTTONS_OK, false);
     dialog.set_secondary_text(_("A recovery set must be loaded before it can be repaired.  Please check that a set has been loaded and try this request again."));
     status_label.set_text(_("Repair Failed"));
-    status_frame.modify_bg(Gtk::STATE_NORMAL, Gdk::Color::Color("red"));
+    status_frame.modify_bg(Gtk::STATE_NORMAL, Gdk::Color("red"));
     dialog.run();
     status_label.set_text("");
     status_frame.unset_bg(Gtk::STATE_NORMAL);
@@ -530,7 +530,7 @@
 			      Gtk::MESSAGE_ERROR, Gtk::BUTTONS_OK, false);
     dialog.set_secondary_text(_("A recovery set must be loaded before verification.  Please check that a set has been loaded and try this request again."));
     status_label.set_text(_("Verification Failed"));
-    status_frame.modify_bg(Gtk::STATE_NORMAL, Gdk::Color::Color("red"));
+    status_frame.modify_bg(Gtk::STATE_NORMAL, Gdk::Color("red"));
     dialog.run();
     status_label.set_text("");
     status_frame.unset_bg(Gtk::STATE_NORMAL);
