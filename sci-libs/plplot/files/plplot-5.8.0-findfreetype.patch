--- FindFreetype.cmake.orig	2008-03-19 21:28:18.000000000 +1100
+++ FindFreetype.cmake	2008-03-19 22:22:05.000000000 +1100
@@ -7,20 +7,50 @@
 # also defined, but not for general use are
 #  FREETYPE_LIBRARY, where to find the freetype library.
 
-FIND_PATH(FREETYPE_INCLUDE_DIR freetype/config/ftheader.h
-/usr/local/include/freetype2
-/usr/include/freetype2
-)
+if (FREETYPE_LIBRARIES AND FREETYPE_INCLUDE_DIR)
+  
+  # in cache already
+  set(FREETYPE_FOUND TRUE)
+  
+else (FREETYPE_LIBRARIES AND FREETYPE_INCLUDE_DIR)
+  
+  FIND_PROGRAM(FREETYPECONFIG_EXECUTABLE NAMES freetype-config PATHS
+    $ENV{PATH}
+    /usr/bin
+    /usr/local/bin
+    /opt/local/bin
+    NO_DEFAULT_PATH
+    )
+  FIND_PROGRAM(FREETYPECONFIG_EXECUTABLE NAMES freetype-config)
+  
+  #reset vars
+  set(FREETYPE_LIBRARIES)
+  set(FREETYPE_INCLUDE_DIR)
+  
+  # if freetype-config has been found
+  if(FREETYPECONFIG_EXECUTABLE)
+    
+    EXEC_PROGRAM(${FREETYPECONFIG_EXECUTABLE} ARGS --libs RETURN_VALUE _return_VALUE OUTPUT_VARIABLE FREETYPE_LIBRARIES)
+    
+    EXEC_PROGRAM(${FREETYPECONFIG_EXECUTABLE} ARGS --cflags RETURN_VALUE _return_VALUE OUTPUT_VARIABLE FREETYPE_INCLUDE_DIR)
+    if(FREETYPE_LIBRARIES AND FREETYPE_INCLUDE_DIR)
+      set(FREETYPE_FOUND TRUE)
+      #message(STATUS "Found freetype: ${FREETYPE_LIBRARIES}")
+    endif(FREETYPE_LIBRARIES AND FREETYPE_INCLUDE_DIR)
+    
+    
+    set( FREETYPE_LIBRARIES ${FREETYPE_LIBRARIES} CACHE INTERNAL "The libraries for freetype" )
+    
+  endif(FREETYPECONFIG_EXECUTABLE)
+ 	
+endif (FREETYPE_LIBRARIES AND FREETYPE_INCLUDE_DIR)
 
-SET(FREETYPE_NAMES ${FREETYPE_NAMES} freetype)
-FIND_LIBRARY(FREETYPE_LIBRARY
-  NAMES ${FREETYPE_NAMES}
-  PATHS /usr/lib /usr/local/lib
-  )
-
-IF (FREETYPE_LIBRARY AND FREETYPE_INCLUDE_DIR)
-    SET(FREETYPE_LIBRARIES ${FREETYPE_LIBRARY})
-    SET(FREETYPE_FOUND "YES")
-ELSE (FREETYPE_LIBRARY AND FREETYPE_INCLUDE_DIR)
-  SET(FREETYPE_FOUND "NO")
-ENDIF (FREETYPE_LIBRARY AND FREETYPE_INCLUDE_DIR)
+IF(FREETYPE_FOUND)
+  IF(NOT FREETYPE_FIND_QUIETLY)
+    MESSAGE(STATUS "Found FREETYPE: ${FREETYPE_LIBRARIES}")
+  ENDIF(NOT FREETYPE_FIND_QUIETLY)
+ELSE(FREETYPE_FOUND)
+  IF(FREETYPE_FIND_REQUIRED)
+    MESSAGE(FATAL_ERROR "Could not find FREETYPE")
+  ENDIF(FREETYPE_FIND_REQUIRED)
+ENDIF(FREETYPE_FOUND)
--- freetype.cmake.orig	2008-03-19 21:38:01.000000000 +1100
+++ freetype.cmake	2008-03-19 21:50:04.000000000 +1100
@@ -47,7 +47,7 @@
 else(WIN32)
   set(
   PL_FREETYPE_FONT_PATH
-  "/usr/share/fonts/truetype/freefont"
+  "/usr/share/fonts/freefont-ttf"
   CACHE PATH "Path for TrueType fonts"
   )
 endif(WIN32)
--- gd.cmake.orig	2008-03-19 22:21:35.000000000 +1100
+++ gd.cmake	2008-03-19 22:25:19.000000000 +1100
@@ -44,10 +44,6 @@
     set(PLD_gif OFF CACHE BOOL "Enable gif device" FORCE)
   else (NOT GD_FOUND)
 
-    if (WITH_FREETYPE)
-      set(GD_INCLUDE_DIR ${GD_INCLUDE_DIR} ${FREETYPE_INCLUDE_DIR})
-      set(GD_LIBRARIES ${GD_LIBRARIES} ${FREETYPE_LIBRARIES})
-    endif (WITH_FREETYPE)
   endif (NOT GD_FOUND)
 endif(PLD_png OR PLD_jpeg OR PLD_gif)
 
@@ -71,6 +67,10 @@
   foreach(DIR ${GD_INCLUDE_DIR})
     set(gd_COMPILE_FLAGS "${gd_COMPILE_FLAGS} -I${DIR}")
   endforeach(DIR ${GD_INCLUDE_DIR})
+  if (WITH_FREETYPE)
+    set(gd_COMPILE_FLAGS "${gd_COMPILE_FLAGS} ${FREETYPE_INCLUDE_DIR}")
+    set(GD_LIBRARIES ${GD_LIBRARIES} ${FREETYPE_LIBRARIES})
+  endif (WITH_FREETYPE)
 
   # Generate library link commands
   set(gd_LINK_FLAGS ${GD_LIBRARIES})
